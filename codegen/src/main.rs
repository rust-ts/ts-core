#![allow(non_upper_case_globals)]
use std::env;
use std::fs::File;
use std::io::{self, BufWriter, Write};
use std::path::Path;

static TextToKeywordMap: &str = r#"
  "abstract" => syntax_kind::AbstractKeyword,
  "any" => syntax_kind::AnyKeyword,
  "as" => syntax_kind::AsKeyword,
  "asserts" => syntax_kind::AssertsKeyword,
  "bigint" => syntax_kind::BigIntKeyword,
  "boolean" => syntax_kind::BooleanKeyword,
  "break" => syntax_kind::BreakKeyword,
  "case" => syntax_kind::CaseKeyword,
  "catch" => syntax_kind::CatchKeyword,
  "class" => syntax_kind::ClassKeyword,
  "continue" => syntax_kind::ContinueKeyword,
  "const" => syntax_kind::ConstKeyword,
  "constructor" => syntax_kind::ConstructorKeyword,
  "debugger" => syntax_kind::DebuggerKeyword,
  "declare" => syntax_kind::DeclareKeyword,
  "default" => syntax_kind::DefaultKeyword,
  "delete" => syntax_kind::DeleteKeyword,
  "do" => syntax_kind::DoKeyword,
  "else" => syntax_kind::ElseKeyword,
  "enum" => syntax_kind::EnumKeyword,
  "export" => syntax_kind::ExportKeyword,
  "extends" => syntax_kind::ExtendsKeyword,
  "false" => syntax_kind::FalseKeyword,
  "finally" => syntax_kind::FinallyKeyword,
  "for" => syntax_kind::ForKeyword,
  "from" => syntax_kind::FromKeyword,
  "function" => syntax_kind::FunctionKeyword,
  "get" => syntax_kind::GetKeyword,
  "if" => syntax_kind::IfKeyword,
  "implements" => syntax_kind::ImplementsKeyword,
  "import" => syntax_kind::ImportKeyword,
  "in" => syntax_kind::InKeyword,
  "infer" => syntax_kind::InferKeyword,
  "instanceof" => syntax_kind::InstanceOfKeyword,
  "interface" => syntax_kind::InterfaceKeyword,
  "is" => syntax_kind::IsKeyword,
  "keyof" => syntax_kind::KeyOfKeyword,
  "let" => syntax_kind::LetKeyword,
  "module" => syntax_kind::ModuleKeyword,
  "namespace" => syntax_kind::NamespaceKeyword,
  "never" => syntax_kind::NeverKeyword,
  "new" => syntax_kind::NewKeyword,
  "null" => syntax_kind::NullKeyword,
  "number" => syntax_kind::NumberKeyword,
  "object" => syntax_kind::ObjectKeyword,
  "package" => syntax_kind::PackageKeyword,
  "private" => syntax_kind::PrivateKeyword,
  "protected" => syntax_kind::ProtectedKeyword,
  "public" => syntax_kind::PublicKeyword,
  "readonly" => syntax_kind::ReadonlyKeyword,
  "require" => syntax_kind::RequireKeyword,
  "global" => syntax_kind::GlobalKeyword,
  "return" => syntax_kind::ReturnKeyword,
  "set" => syntax_kind::SetKeyword,
  "static" => syntax_kind::StaticKeyword,
  "string" => syntax_kind::StringKeyword,
  "super" => syntax_kind::SuperKeyword,
  "switch" => syntax_kind::SwitchKeyword,
  "symbol" => syntax_kind::SymbolKeyword,
  "this" => syntax_kind::ThisKeyword,
  "throw" => syntax_kind::ThrowKeyword,
  "true" => syntax_kind::TrueKeyword,
  "try" => syntax_kind::TryKeyword,
  "type" => syntax_kind::TypeKeyword,
  "typeof" => syntax_kind::TypeOfKeyword,
  "undefined" => syntax_kind::UndefinedKeyword,
  "unique" => syntax_kind::UniqueKeyword,
  "unknown" => syntax_kind::UnknownKeyword,
  "var" => syntax_kind::VarKeyword,
  "void" => syntax_kind::VoidKeyword,
  "while" => syntax_kind::WhileKeyword,
  "with" => syntax_kind::WithKeyword,
  "yield" => syntax_kind::YieldKeyword,
  "async" => syntax_kind::AsyncKeyword,
  "await" => syntax_kind::AwaitKeyword,
  "of" => syntax_kind::OfKeyword,
"#;

static TextToToken: &str = r#"
  "{" => syntax_kind::OpenBraceToken,
  "}" => syntax_kind::CloseBraceToken,
  "(" => syntax_kind::OpenParenToken,
  ")" => syntax_kind::CloseParenToken,
  "[" => syntax_kind::OpenBracketToken,
  "]" => syntax_kind::CloseBracketToken,
  "." => syntax_kind::DotToken,
  "..." => syntax_kind::DotDotDotToken,
  ";" => syntax_kind::SemicolonToken,
  "," => syntax_kind::CommaToken,
  "<" => syntax_kind::LessThanToken,
  ">" => syntax_kind::GreaterThanToken,
  "<=" => syntax_kind::LessThanEqualsToken,
  ">=" => syntax_kind::GreaterThanEqualsToken,
  "==" => syntax_kind::EqualsEqualsToken,
  "!=" => syntax_kind::ExclamationEqualsToken,
  "===" => syntax_kind::EqualsEqualsEqualsToken,
  "!==" => syntax_kind::ExclamationEqualsEqualsToken,
  "=>" => syntax_kind::EqualsGreaterThanToken,
  "+" => syntax_kind::PlusToken,
  "-" => syntax_kind::MinusToken,
  "**" => syntax_kind::AsteriskAsteriskToken,
  "*" => syntax_kind::AsteriskToken,
  "/" => syntax_kind::SlashToken,
  "%" => syntax_kind::PercentToken,
  "++" => syntax_kind::PlusPlusToken,
  "--" => syntax_kind::MinusMinusToken,
  "<<" => syntax_kind::LessThanLessThanToken,
  "</" => syntax_kind::LessThanSlashToken,
  ">>" => syntax_kind::GreaterThanGreaterThanToken,
  ">>>" => syntax_kind::GreaterThanGreaterThanGreaterThanToken,
  "&" => syntax_kind::AmpersandToken,
  "|" => syntax_kind::BarToken,
  "^" => syntax_kind::CaretToken,
  "!" => syntax_kind::ExclamationToken,
  "~" => syntax_kind::TildeToken,
  "&&" => syntax_kind::AmpersandAmpersandToken,
  "||" => syntax_kind::BarBarToken,
  "?" => syntax_kind::QuestionToken,
  "??" => syntax_kind::QuestionQuestionToken,
  "?." => syntax_kind::QuestionDotToken,
  ":" => syntax_kind::ColonToken,
  "=" => syntax_kind::EqualsToken,
  "+=" => syntax_kind::PlusEqualsToken,
  "-=" => syntax_kind::MinusEqualsToken,
  "*=" => syntax_kind::AsteriskEqualsToken,
  "**=" => syntax_kind::AsteriskAsteriskEqualsToken,
  "/=" => syntax_kind::SlashEqualsToken,
  "%=" => syntax_kind::PercentEqualsToken,
  "<<=" => syntax_kind::LessThanLessThanEqualsToken,
  ">>=" => syntax_kind::GreaterThanGreaterThanEqualsToken,
  ">>>=" => syntax_kind::GreaterThanGreaterThanGreaterThanEqualsToken,
  "&=" => syntax_kind::AmpersandEqualsToken,
  "|=" => syntax_kind::BarEqualsToken,
  "^=" => syntax_kind::CaretEqualsToken,
  "||=" => syntax_kind::BarBarEqualsToken,
  "&&=" => syntax_kind::AmpersandAmpersandEqualsToken,
  "??=" => syntax_kind::QuestionQuestionEqualsToken,
  "@" => syntax_kind::AtToken,
  "`" => syntax_kind::BacktickToken,
"#;

fn main() -> io::Result<()> {
  let file = Path::new(&env::current_dir().unwrap())
    .join("compiler")
    .join("src")
    .join("scanner")
    .join("token_map.rs");
  let mut file = BufWriter::new(File::create(&file)?);

  writeln!(
    &mut file,
    "use phf::phf_map;\n\n use crate::types::syntax_kind; \n\npub static TextToKeywordMap: phf::Map<&'static str, u16> = phf_map! {{ {}}};\npub static TextToTokenMap: phf::Map<&'static str, u16> = phf_map! {{ {}{}}};",
    TextToKeywordMap,
    TextToKeywordMap,
    TextToToken,
  )?;
  Ok(())
}
