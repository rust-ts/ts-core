use tscore_span::Span;

#[derive(PartialEq, PartialOrd, Debug)]
pub enum TriviaToken {
  SingleLineComment,
  MultiLineComment,
  NewLine,
  Whitespace,
  Shebang,
  ConflictMarker,
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum LiteralToken {
  NumericLiteral,
  BigIntLiteral,
  StringLiteral,
  JsxText,
  JsxTextAllWhiteSpaces,
  RegularExpressionLiteral,
  NoSubstitutionTemplateLiteral,
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum PseudoLiteralToken {
  TemplateHead,
  TemplateMiddle,
  TemplateTail,
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum PunctuationToken {
  OpenBrace,
  CloseBrace,
  OpenParen,
  CloseParen,
  OpenBracket,
  CloseBracket,
  Dot,
  DotDotDot,
  Semicolon,
  Comma,
  QuestionDot,
  LessThan,
  LessThanSlash,
  GreaterThan,
  LessThanEquals,
  GreaterThanEquals,
  EqualsEquals,
  ExclamationEquals,
  EqualsEqualsEquals,
  ExclamationEqualsEquals,
  EqualsGreaterThan,
  Plus,
  Minus,
  Asterisk,
  AsteriskAsterisk,
  Slash,
  Percent,
  PlusPlus,
  MinusMinus,
  LessThanLessThan,
  GreaterThanGreaterThan,
  GreaterThanGreaterThanGreaterThan,
  Ampersand,
  Bar,
  Caret,
  Exclamation,
  Tilde,
  AmpersandAmpersand,
  BarBar,
  QuestionQuestion,
  Question,
  Colon,
  At,
  Backtick,
  Equals,
  PlusEquals,
  MinusEquals,
  AsteriskEquals,
  AsteriskAsteriskEquals,
  SlashEquals,
  PercentEquals,
  LessThanLessThanEquals,
  GreaterThanGreaterThanEquals,
  GreaterThanGreaterThanGreaterThanEquals,
  AmpersandEquals,
  BarEquals,
  CaretEquals,
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum KeywordToken {
  Abstract,
  Any,
  As,
  Asserts,
  Async,
  Await,
  BigInt,
  Boolean,
  Break,
  Case,
  Catch,
  Class,
  Const,
  Constructor,
  Continue,
  Debugger,
  Declare,
  Default,
  Delete,
  Do,
  Else,
  Enum,
  Export,
  Extends,
  False,
  Finally,
  For,
  From,
  Function,
  Get,
  Global,
  If,
  Implements,
  Import,
  Infer,
  In,
  InstanceOf,
  Interface,
  Intrinsic,
  Is,
  KeyOf,
  Let,
  Module,
  Namespace,
  Never,
  New,
  Null,
  Number,
  Object,
  Of,
  Package,
  Private,
  Protected,
  Public,
  Readonly,
  Require,
  Return,
  Set,
  Static,
  String,
  Super,
  Switch,
  Symbol,
  This,
  Throw,
  True,
  Try,
  Type,
  TypeOf,
  Undefined,
  Unique,
  Unknown,
  Var,
  Void,
  While,
  With,
  Yield,
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum ModifierToken {
  Abstract,
  Async,
  Const,
  Declare,
  Default,
  Export,
  Private,
  Protected,
  Public,
  Readonly,
  Static,
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum KeywordTypeToken {
  Any,
  BigInt,
  Boolean,
  Intrinsic,
  Never,
  Number,
  Object,
  String,
  Symbol,
  Undefined,
  Unknown,
  Void,
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum TypeNodeToken {
  Keyword(KeywordTypeToken),
  TypePredicate,
  TypeReference,
  FunctionType,
  ConstructorType,
  TypeQuery,
  TypeLiteral,
  ArrayType,
  TupleType,
  NamedTupleMember,
  OptionalType,
  RestType,
  UnionType,
  IntersectionType,
  ConditionalType,
  InferType,
  ParenthesizedType,
  ThisType,
  TypeOperator,
  IndexedAccessType,
  MappedType,
  LiteralType,
  TemplateLiteralType,
  TemplateLiteralTypeSpan,
  ImportType,
  ExpressionWithTypeArguments,
  JSDocTypeExpression,
  JSDocAllType,
  JSDocUnknownType,
  JSDocNonNullableType,
  JSDocNullableType,
  JSDocOptionalType,
  JSDocFunctionType,
  JSDocVariadicType,
  JSDocNamepathType,
  JSDocSignature,
  JSDocTypeLiteral,
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum JsxToken {
  LessThanSlash,
  ConflictMarker,
  JsxText,
  JsxTextAllWhiteSpaces,
  OpenBrace,
  LessThan,
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum JSDocToken {
  Unknown,
  Eof,
  Whitespace,
  At,
  NewLine,
  Asterisk,
  OpenBrace,
  CloseBrace,
  LessThan,
  GreaterThan,
  OpenBracket,
  CloseBracket,
  Equals,
  Comma,
  Dot,
  Backtick,
  Ident,
  Keyword(KeywordToken),
}

#[derive(PartialEq, PartialOrd, Debug)]
pub enum TokenKind {
  Trivia(TriviaToken),
  Literal(LiteralToken),
  PseudoLiteral(PseudoLiteralToken),
  Punctuation(PunctuationToken),
  Ident,
  Keyword(KeywordToken),
  Unknown,
  Eof,
}

impl TokenKind {
  pub fn is_keyword(&self) -> bool {
    match self {
      TokenKind::Keyword(_) => true,
      _ => false,
    }
  }
}

pub struct Token {
  pub kind: TokenKind,
  pub span: Span,
}
